#!/usr/bin/env node

var program = require('commander');
var spawn   = require('child_process').spawn;
var util    = require('util');
var Redis   = require('../lib/sources/redis');

program
  .version('1.0.0')  
  .usage('[options] [config.json]')
  .option('-n, --name [name]', 'The name of the node (if you have multiple instances)', 'sentry')
  .option('--redis-host <host>', 'The host or IP of the Redis server')
  .option('--redis-port <port>', 'The port of the Redis server')
  .option('--redis-password <password>', 'Authentication secret for Redis')
  .option('-u, --urls', 'Show urls instead of domains')
  .parse(process.argv);

var redis, config;

//if there are redis config options
if(program.redisHost){
  redis = {
    host: program.redisHost,
    port: program.redisPort
  };
}



if(program.args[0]){
  //if there is a config file given, ignore all the other params and load the config file!
  var path = program.args[0];
  if(path[0] != '/'){
    path = process.cwd() + '/' + path;
  }
  
  try{
    config = require(path);
    readLogfile();
  }catch(e){
    //console.log('config file not valid json!');
    //process.exit(0);
    config = {
      log: path
    };
    
    readLogfile(true);
  }
}else{
  
  //build the config object
  config = {
    name: program.name,
    redis: redis
  };
}




function readLogfile(use_less){
  if(!config.redis && use_less !== true){
    console.log('Redis not configured!');
    process.exit(0);
  }

  if(typeof config.log != 'string'){
    console.log('No log file defined!');
    process.exit(0);
  }

  if(config.redis){
    redis = new Redis(config.redis);

    //tell the target to start debugging mode
    redis.client.publish(config.name, 'start debugger');
  }

  if(!use_less) tail = spawn('tail', ['-f', '-n', 0, config.log]);
  if(use_less){
    //require('tty').setRawMode(false);
    tail = spawn('more', [config.log]);
  }
  
  tail.stdout.on('data', function(data){
    var chunks = data.toString().split('\n');
    chunks.pop();
        
    for(var i in chunks){
      try{
        var obj = JSON.parse(chunks[i]);
        logObject(obj);
      }catch(e){
        
      }
    }
    /*
    try{
      var objs = JSON.parse('[' + chunks.join(',') + ']');
    
      for(var i in objs){
        var obj = objs[i];
        logObject(obj);
      }
    }catch(e){
      console.log('---->', chunks, '<----');
      console.log(e);
        process.exit(0);
    }
    */
  });


  process.on('SIGINT', function () {
    //tell the target to stop debugging mode
    if(redis){
      redis.client.publish(config.name, 'stop debugger');
      redis.close();
    }
    
    
    console.log('AVG TIME:' + (times/entries/1000) + 's');
    
    
    //require('tty').setRawMode(true);
    process.exit(0);
  });  
}


  

var level = {
  10: 'TRACE',
  20: 'DEBUG',
  30: 'INFO',
  40: 'WARN',
  50: 'ERROR',
  60: 'FATAL'
};

var times = 0;
var entries = 0;

function logObject(obj){
  var tmp = [obj.time];
  
  tmp.push('[' + level[obj.level] + ']');
  
  //normal msg
  if(obj.msg){
    tmp.push(obj.msg);
  }
  
  //rule
  if(obj.rule && obj.options){
    
    
    tmp.push(obj.allowed ? 'allow' : 'redirect');
    
    if(program.urls){
      tmp.push(obj.options.url);
    }else{
      tmp.push(obj.options.domain);
    }
    
    
    if(obj.redirect){
      tmp.push('to');
      tmp.push(obj.redirect);
    }
    
    tmp.push('\t');
    tmp.push('[');
    tmp.push('RULE:' + obj.rule);
    if(obj.options.username){
      tmp.push('USER:' + obj.options.username);
    }
    if(obj.options.ip){
      tmp.push('IP:' + obj.options.ip);
    }
    if(obj.options.id){
      tmp.push('ID:' + obj.options.id);
    }
    
    if(obj.used_time){
      tmp.push('TIME:' + (obj.used_time / 1000) + 's');
      times += obj.used_time
      entries++;
    }
    
    tmp.push(']');
  }
  
  if(obj.error){
    tmp.push(obj.error);
    if(obj.input){
      tmp.push('"' + obj.input + '"');
    }else{
      tmp.push('in');
      tmp.push(obj.source);
    }
    
    if(obj.stack){
      tmp.push('\nStack:\n' + obj.stack);
    }   
  }
  
  if(obj.rules){
    tmp.push('Loaded rules: ' + obj.rules.join(', '));
    tmp.push('-- from sources: ' + obj.loaded_sources.join(', '));
  }
  
  if(obj.type){
    tmp.push(obj.type);
    tmp.push(util.inspect(obj.options, true, 1, true).replace(/(\r\n|\n|\r)/gm, '').replace('{', '[').replace('}', ']'));
  }
  
  console.log(tmp.join(' '));
}


