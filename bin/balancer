#!/usr/bin/env node

var program = require('commander');
var spawn   = require('child_process').spawn;
var netmask = require('netmask');
var ip      = require('../lib/rules/ip');

program
  .version('0.0.1')  
  .usage('[config.json ...]')
  .parse(process.argv);

var children = [];

if(program.args[0]){
  var file, child;
    
  for(var i in program.args){
    child = createChild(program.args[i]);
    if(child){
      children.push(child);
    }    
  }
  
  
  //listen to stdin and set the encoding to utf8
  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  
  //when squid quits the stdin, exit the app as well!
  process.stdin.on('end', function () {
    process.exit(0);
  });
  
  //on data (see http://wiki.squid-cache.org/Features/Redirectors)
  process.stdin.on('data', function (chunk) {
    callChildren(chunk);      
  });
  
}


function createChild(file){
  var path = file;
  if(file[0] != '/'){
    path = process.cwd() + '/' + path;
  }
  
  try{
    config = require(path);
  }catch(e){
    console.log('config file (' + file + ') not valid json!');
    return false;
  }
  
  
  var child = spawn(__dirname + '/sentry', [file]); //, { stdio: [null, process.stdout, process.stderr] });
      
  if(config.range){
    child.types = [];
    child.ip_filter = true;
    ip.config.call(child, {ips:config.range});
  }
  
  child.config = config;
              
              
  child.stdout.on('data', function(data){
    process.stdout.write(data);
  });
  
  child.on('exit', function(code, signal){
    children.splice(children.indexOf(child), 1);
    children.push(createChild(file));
  });
              
                  
  return child;
}


function callChildren(chunk){
    
  var parts = [chunk];
  var chunks;
  
  if(chunk.match(/\n/)){
    parts = chunk.split(/\n/);
  }    
    
  for(var i in parts){
    
    chunks = parts[i].match(/(\d+) (.+?) (.+?)\/- (.+?) (.+?)( (.+)|$)/);
  
    if(chunks){
        
      var params = {
        id:       chunks[1],
        url:      chunks[2],
        ip:       chunks[3],
        username: chunks[4],
        method:   chunks[5],
        params:   chunks[7]
      };
    
      if(!params.url.match(/^http:.+/) && params.method == 'CONNECT'){
        params.url = 'https://' + params.url;
      }
    
      var rule_responded = false;
    
      for(var x in children){
        if((children[x].ip_filter && ip.filter.call(children[x], params)) || !children[x].ip_filter){
          children[x].parts = children[x].parts || [];
          children[x].parts.push(parts[i]);       

          //put current child at the end for a round robin effect
          children.push(children.shift());
          rule_responded = true;
          break;
        }
      }
      
      if(!rule_responded){
        //No rule found! Respond with an "allowed"!
        process.stdout.write(parts[i].split(' ')[0] + '\n');
      }
    }else{
      if(parts[i].length > 1){
        process.stdout.write(parts[i].split(' ')[0] + '\n');
      }
    }
  }
  
  for(var x in children){
    if(children[x].parts){
      children[x].stdin.write(children[x].parts.join('\n') + '\n', 'utf-8'); 
      children[x].parts = [];
    }
  }
}