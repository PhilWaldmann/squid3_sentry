#!/usr/bin/env node

var glob    = require('glob');
var flow    = require('flow');
var program = require('commander');

var Redis   = require('../lib/sources/redis');

program
  .version('1.0.1')  
  .usage('[options] <path>')
  .option('-s, --server <server>', 'Redis server')
  .option('-p, --port <port>', 'Redis port', parseInt)
  .option('-d, --database <database>', 'Redis database. Default is 0', parseInt)
  .option('-a, --auth <password>', 'Redis authentication')
  .option('-f, --flush', 'Flush all data first')
  .option('--prefix [prefix]', 'Set a prefix.', 'sentry')
  .option('--quiet', 'No output to the terminal')
  .parse(process.argv);
  
//TODO: use config file
  
var redis   = new Redis({
  host: program.server,
  port: program.port,
  password: program.auth,
  database: program.database,
  prefix: program.prefix
});

var start   = new Date().getTime();
var path, bar;


program.path = program.args[0];

//check if a path is given
if(!program.path){
  console.log('No path given');
  process.exit(1);
}

//check if absolute or relative path
if(program.path[0] != '/'){
  path = process.cwd() + '/';
}
path += program.path;

//if not quiet, initialize the progress bar
if(!program.quiet){
  bar = require('progress-bar').create(process.stdout);
}


if(program.flush){
  redis.clearDomains();
}



//find all domains files
glob('**/domains', {cwd: path}, function(err, files){
  
  var done = 0;
  var total = files.length;
  
  //Loop files
  flow.serialForEach(files, function(file){
        
    //get name and path
    var name = file.replace('/domains', '').replace('/', '_');
    var full_path = path + '/' + file;
    
    //update processbar to show the current name
    if(bar){
      bar.format = '$bar; $percentage;% loading ' + name;
      bar.update(done/total);
    }
    
    //Write all domains in the file into redis
    redis.writeDomains(name, full_path, this);
    
  }, function(){
    done++;
    if(bar){
      if(done == total){
        var end = new Date().getTime() - start;
        bar.format = '$bar; $percentage;% DONE in ' + (end / 1000) + 's\n';
      }
    
      //update progressbar
      bar.update(done/total);
    }
  }, function(){
    //everything is done
    process.exit(0);
  }); 
});

