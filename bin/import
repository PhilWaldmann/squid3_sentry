#!/usr/bin/env node

var glob    = require('glob');
var flow    = require('flow');
var program = require('commander');
var spawn   = require('child_process').spawn;

var Redis   = require('../lib/sources/redis');

var shallalist_url = 'http://www.shallalist.de/Downloads/shallalist.tar.gz';

program
  .version('1.0.1')  
  .usage('[options] <path>')
  .option('-l, --location <url>', 'The shallalist url. Default is http://www.shallalist.de/Downloads/shallalist.tar.gz', shallalist_url)
  .option('-s, --server <server>', 'Redis server')
  .option('-p, --port <port>', 'Redis port', parseInt)
  .option('-d, --database <database>', 'Redis database. Default is 0', parseInt)
  .option('-a, --auth <password>', 'Redis authentication')
  .option('-f, --flush', 'Flush all data first')
  .option('--prefix [prefix]', 'Set a prefix.', 'sentry')
  .option('--quiet', 'No output to the terminal')
  .parse(process.argv);


//TODO: use config file
  
var redis   = new Redis({
  host: program.server,
  port: program.port,
  password: program.auth,
  database: program.database,
  prefix: program.prefix
});



program.path = program.args[0];

//check if a path is given
if(!program.path){
  if(program.location == shallalist_url && !program.quiet){
    program.confirm('Download from shallalist.org?', function(answer){
      if(answer){
        download_archive(program.location);
      }else{
        process.exit(0);
      }
    });
  }else{
    download_archive(program.location);
  }  
}else{
  import_file(program.path);
}

function download_archive(url){
  var tmp_file = '/var/tmp/shallalist.tar.gz';
  var tmp_folder = '/var/tmp/shallalist';
  var curl = spawn('curl', [url, '-o', tmp_file]);
  
  if(!program.quiet){
    console.log('Downloading from', url);
  }
    
  curl.on('exit', function (code) {
    if(code != 0){
      console.log('download error');
      process.exit(1);
    }
    var mkdir = spawn('mkdir', [tmp_folder]);
    
    mkdir.on('exit', function(code){
      if(code != 0){
        console.log('create temp dir error');
        process.exit(1);
      }
      
      var tar = spawn('tar', ['-zxvf', tmp_file, '-C', tmp_folder]);
       
      tar.on('exit', function(code){
       if(code != 0){
         console.log('untar error');
         process.exit(1);
       }
       
       import_file(tmp_folder + '/BL', function(){
         var rm = spawn('rm', ['-rf', tmp_file, tmp_folder]);
 
         rm.on('exit', function(){
           if(code != 0){
             console.log('remove temp dir error');
             process.exit(1);
           }
           process.exit(0);
         });
       });
      });      
    });
  });
}

function import_file(file, callback){
  var start = new Date().getTime();

  var bar;
  var path  = '';
  
  //check if absolute or relative path
  if(file[0] != '/'){
    path = process.cwd() + '/';
  }
  path += file;

  //if not quiet, initialize the progress bar
  if(!program.quiet){
    bar = require('progress-bar').create(process.stdout);
  }

  if(program.flush){
    redis.clearDomains();
  }

  //find all domains files
  glob('**/{domains,urls}', {cwd: path, nounique:true}, function(err, files){

    var done = 0;
    var total = files.length;

    //Loop files
    flow.serialForEach(files, function(file){

      //get name and path
      var name = file.replace(/\/(domains|urls)/, '').replace('/', '_');
      var full_path = path + '/' + file;

      //update processbar to show the current name
      if(bar){
        bar.format = '$bar; $percentage;% loading ' + name;
        bar.update(done/total);
      }

      //Write all domains in the file into redis
      redis.writeDomains(name, full_path, this);

    }, function(){
      done++;
      if(bar){
        if(done == total){
          var end = new Date().getTime() - start;
          bar.format = '$bar; $percentage;% DONE in ' + (end / 1000) + 's\n';
        }

        //update progressbar
        bar.update(done/total);
      }
    }, function(){
      //everything is done
      
      if(callback){
        callback();
      }else{
        process.exit(0);
      }
      
    }); 
  });
}

