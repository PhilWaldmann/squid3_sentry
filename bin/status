#!/usr/bin/env node

var exec = require('child_process').exec;
var program = require('commander');
var Core   = require('../lib/core');

program
  .version('1.0.1')  
  .usage('[options] [config.json]')
  .parse(process.argv);

if(program.args[0]){
  //if there is a config file given, ignore all the other params and load the config file!
  var path = program.args[0];
  if(path[0] != '/'){
    path = process.cwd() + '/' + path;
  }
  
  try{
    config = require(path);    
  }catch(e){
    console.log('config file not valid json!');
    process.exit(0);
  }
  
  config.explain = false;
  config.log = false;
  config.ignore_test = true;
  config.allow_multiple = true;
  
  var core = Core.getSharedInstance() || new Core(config);
  
  console.log('Sentry status');
  console.log('');
  
  exec('ps aux | grep sentry', function(error, stdout, stderr){
    var tmp = stdout.split('\n');
    var running = false;
    for(var i in tmp){
      if(tmp[i].match(/sentry .+/)) running = true;
    }
    if(running){
      console.log('✓ Sentry: process runnning');
    }else{
      console.log('✗ Sentry: no process runnning');
    }
  });
  
  
  console.log('Name:', core.name);
      
  var redis_retries = 0;
  var ldap_retries  = 0;
  var retries       = 50;
  var done          = 0;
  
  if(core.redis){
    done++;
    
    var redis_check = setInterval(function(){
      if(core.redis.client.connected){
        console.log('✓ Redis: connected');
        clearInterval(redis_check);
  
        setTimeout(function(){
          console.log('Rules');
          print_rules(core.rules);
        
          //send Test
          core.redis.client.publish(core.name, 'test');   
        
          done--;
          if(done == 0) process.exit(0);
                    
        }, 2000);
                                   
        
        var test_timeout;
        
        done++;
        //receive test:ok from squid!
        core.redis.listenForChanges(core.name, function(msg){
          if(msg == 'test'){
            test_timeout = setTimeout(function(){
              
              console.log('✗ Sentry: does not respond properly!');
              
              done--;
              if(done == 0) process.exit(0);
              
            }, 2000);
          }
          var version = msg.match(/version:(.+)/i);
          if(version){
            clearTimeout(test_timeout);
            console.log('✓ Sentry: running (v. ' + version[1] + ')');
                        
            done--;
            if(done == 0) process.exit(0);
          }
          
        });
        
        
                        
      }else{
        redis_retries++;
        if(redis_retries > retries){
          console.log('✗ Redis: no connection');
          clearInterval(redis_check);
          done--;
        }
      }
      if(done == 0) process.exit(0);
    }, 200);
  }
  
  
  if(core.ldap){
    done++;
    
    var ldap_check = setInterval(function(){
      if(core.ldap.bind){
        console.log('✓ LDAP: connected ');
        clearInterval(ldap_check);
        done--;
      }else{
        ldap_retries++;
        if(ldap_retries > retries){
          console.log('✗ LDAP: no connection');
          clearInterval(ldap_check);
          done--;
        }
      }
      if(done == 0) process.exit(0);
    }, 200);
  }
    
  if(done == 0) process.exit(0);
  
}else{
  console.log('No config file given!');
  process.exit(0);
}



function print_rules(rules){
  for(var i in rules){
    print_rule(rules[i]);
  }
}

function print_rule(rule){
  tmp = [];
    
  if(rule.categories.length > 0){
    if(rule.categories.length > 4){
      categories = rule.categories.slice(0, 3);
      categories.push('+ ' + (rule.categories.length - 3) + ' more')
    }else{
      categories = rule.categories;
    }
    
    tmp.push('Category: ' + categories.join(', '))
  }
  
  
  if(rule.category_files.length > 0){
    if(rule.category_files.length > 4){
      category_files = rule.category_files.slice(0, 3);
      category_files.push('+ ' + (rule.category_files.length - 3) + ' more')
    }else{
      category_files = rule.category_files;
    }
    
    tmp.push('Category File: ' + category_files.join(', '))
  }
  
  
  if(rule.file_types.length > 0){
    if(rule.file_types.length > 4){
      file_types = rule.file_types.slice(0, 3);
      file_types.push('+ ' + (rule.file_types.length - 3) + ' more')
    }else{
      file_types = rule.file_types;
    }
    
    tmp.push('File type: ' + file_types.join(', '))
  }
  
  
  if(rule.matches.length > 0){
    if(rule.matches.length > 4){
      matches = rule.matches.slice(0, 3);
      matches.push('+ ' + (rule.matches.length - 3) + ' more')
    }else{
      matches = rule.matches;
    }
    
    tmp.push('Match: ' + matches.join(', '))
  }
  
  
  if(rule.groups.length > 0){
    if(rule.groups.length > 4){
      groups = rule.groups.slice(0, 3);
      groups.push('+ ' + (rule.groups.length - 3) + ' more')
    }else{
      groups = rule.groups;
    }
    
    tmp.push('Group: ' + groups.join(', '))
  }
  
  
  if(rule.users.length > 0){
    if(rule.users.length > 4){
      users = rule.users.slice(0, 3);
      users.push('+ ' + (rule.users.length - 3) + ' more')
    }else{
      users = rule.users;
    }
    
    tmp.push('User: ' + users.join(', '))
  }
  
  
  if(rule.ous.length > 0){
    if(rule.ous.length > 4){
      ous = rule.ous.slice(0, 3);
      ous.push('+ ' + (rule.ous.length - 3) + ' more')
    }else{
      ous = rule.ous;
    }
    
    tmp.push('OU: ' + ous.join(', '))
  }
  
  
  if(rule.ips.length > 0){
    if(rule.ips.length > 4){
      ips = rule.ips.slice(0, 3);
      ips.push('+ ' + (rule.ips.length - 3) + ' more')
    }else{
      ips = rule.ips;
    }
    
    tmp.push('IP: ' + ips.join(', '))
  }
  
  
  console.log(rule.allowed ? ' [ALLOW]' : ' [DENY] ', rule.name, '-', tmp.join(' and '));
  
}
