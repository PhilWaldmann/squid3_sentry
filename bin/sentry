#!/usr/bin/env node

var program = require('commander');
var Squid   = require('../lib/squid');

program
  .version('1.0.1')  
  .usage('[options] [config.json]')
  .option('-r, --redirect <domain>', 'The default domain to redirect if no other is given', 's-team.at')  
  .option('-e, --explain', 'Outputs explainations of the results')
  .option('-n, --name [name]', 'The name of the node (if you have multiple instances)', 'sentry')
  .option('--ldap-url <url>', 'The LDAP url (e.g. ldap://domain.local)')
  .option('--ldap-dn <dn>', 'The LDAP User DN (e.g. CN=MyUser,CN=Users,DC=domain,DC=local)')
  .option('--ldap-password <password>', 'The password for the LDAP user')
  .option('--ldap-base <base>', 'The LDAP Base to start searches (e.g. DC=domain,DC=local)')
  .option('--redis-host <host>', 'The host or IP of the Redis server')
  .option('--redis-port <port>', 'The port of the Redis server')
  .option('--redis-password <password>', 'Authentication secret for Redis')
  .option('--redis-rules', 'Enable dynamic rule injection via redis server (no reload necessary)')
  .parse(process.argv);

var ldap, redis, config;

//if there are ldap config options... 
if(program.ldapUrl){
  ldap = {
    url: program.ldapUrl,
    dn: program.ldapDn,
    password: program.ldapPassword,
    base: program.ldapBase
  };
}

//if there are redis config options
if(program.redisHost){
  redis = {
    host: program.redisHost,
    port: program.redisPort,
    rules: program.redisRules
  };
}



if(program.args[0]){
  //if there is a config file given, ignore all the other params and load the config file!
  var path = program.args[0];
  if(path[0] != '/'){
    path = process.cwd() + '/' + path;
  }
  
  try{
    config = require(path);
  }catch(e){
    console.log('config file not valid json!');
    process.exit(0);
  }
}else{
  
  //build the config object
  config = {
    name: program.name,
    redirect: program.redirect,
    explain: program.explain,
    ldap:ldap,
    redis: redis
  };
}

//Start sentry in squid mode (stdin/stdout)
Squid.start(config);